;
; Interface to HX711 ADC for 'Using Sensors with the Raspberry Pi Pico' book
; Copyright (c) 2023, Daniel Quadros
;

.program hx711

.wrap_target

    // wait for a new conversion
    wait 1 pin 0
    wait 0 pin 0

    // read data bits
    // 5 cycles HIGH, 5 cycles LOW
    set x, 23     
readbit:
    set  pins, 1 [3]
    in   pins, 1
    set  pins, 0 [3]
    jmp  x--, readbit
      
    // add 1 pulse to set gain to 128
    set  pins, 1 [4]
    set  pins, 0

.wrap

% c-sdk {
// Helper function to set a state machine to run our PIO program
static inline void hx711_program_init(PIO pio, uint sm, uint offset, 
    uint dataPin, uint clockPin) {

    // Get an initialized config structure
    pio_sm_config c = hx711_program_get_default_config(offset);

    // Map the state machine's pin groups
    sm_config_set_set_pins(&c, clockPin, 1);
    sm_config_set_in_pins(&c, dataPin);
    
    // Set the pins directions at the PIO
    pio_sm_set_consecutive_pindirs(pio, sm, clockPin, 1, true);
    pio_sm_set_consecutive_pindirs(pio, sm, dataPin, 1, false);

    // Make sure clock is low
    pio_sm_set_pins_with_mask(pio, sm, 1 << clockPin, 0);

    // Set the pins GPIO function (connect PIO to the pad), 
    pio_gpio_init(pio, clockPin);
    pio_gpio_init(pio, dataPin);
    
    // Configure the FIFOs
    sm_config_set_in_shift (&c, false, true, 24);
    sm_config_set_fifo_join (&c, PIO_FIFO_JOIN_RX);

    // Configure the clock for 5 MHz
    float div = clock_get_hz(clk_sys) / 5000000;
    sm_config_set_clkdiv(&c, div);

    // Load our configuration, and jump to the start of the program
    pio_sm_init(pio, sm, offset, &c);
    
    // Set the state machine running
    pio_sm_set_enabled(pio, sm, true);
}
%}